package entitis;
// Generated Jul 24, 2019 11:13:14 PM by Hibernate Tools 5.1.7.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * InformationUser generated by hbm2java
 */
@Entity
@Table(name = "information_user", catalog = "salesystem", uniqueConstraints = @UniqueConstraint(columnNames = "username"))
public class InformationUser implements java.io.Serializable {

	private Integer id;
	private Account account;
	private String name;
	private Boolean gender;
	private Date birthday;
	private String mail;
	private String image;
	private boolean status;
	private Set<EvaluateProduct> evaluateProducts = new HashSet<EvaluateProduct>(0);
	private Set<AddresssShip> addresssShips = new HashSet<AddresssShip>(0);
	private Set<Order> orders = new HashSet<Order>(0);
	private Set<Store> stores = new HashSet<Store>(0);
	private Set<Ship> ships = new HashSet<Ship>(0);

	public InformationUser() {
	}

	public InformationUser(Account account, String name, Date birthday, boolean status) {
		this.account = account;
		this.name = name;
		this.birthday = birthday;
		this.status = status;
	}

	public InformationUser(Account account, String name, Boolean gender, Date birthday, String mail, String image,
			boolean status, Set<EvaluateProduct> evaluateProducts, Set<AddresssShip> addresssShips, Set<Order> orders,
			Set<Store> stores, Set<Ship> ships) {
		this.account = account;
		this.name = name;
		this.gender = gender;
		this.birthday = birthday;
		this.mail = mail;
		this.image = image;
		this.status = status;
		this.evaluateProducts = evaluateProducts;
		this.addresssShips = addresssShips;
		this.orders = orders;
		this.stores = stores;
		this.ships = ships;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "username", unique = true, nullable = false)
	public Account getAccount() {
		return this.account;
	}

	public void setAccount(Account account) {
		this.account = account;
	}

	@Column(name = "name", nullable = false, length = 250)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "gender")
	public Boolean getGender() {
		return this.gender;
	}

	public void setGender(Boolean gender) {
		this.gender = gender;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "birthday", nullable = false, length = 10)
	public Date getBirthday() {
		return this.birthday;
	}

	public void setBirthday(Date birthday) {
		this.birthday = birthday;
	}

	@Column(name = "mail", length = 50)
	public String getMail() {
		return this.mail;
	}

	public void setMail(String mail) {
		this.mail = mail;
	}

	@Column(name = "image", length = 40)
	public String getImage() {
		return this.image;
	}

	public void setImage(String image) {
		this.image = image;
	}

	@Column(name = "status", nullable = false)
	public boolean isStatus() {
		return this.status;
	}

	public void setStatus(boolean status) {
		this.status = status;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "informationUser")
	public Set<EvaluateProduct> getEvaluateProducts() {
		return this.evaluateProducts;
	}

	public void setEvaluateProducts(Set<EvaluateProduct> evaluateProducts) {
		this.evaluateProducts = evaluateProducts;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "informationUser")
	public Set<AddresssShip> getAddresssShips() {
		return this.addresssShips;
	}

	public void setAddresssShips(Set<AddresssShip> addresssShips) {
		this.addresssShips = addresssShips;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "informationUser")
	public Set<Order> getOrders() {
		return this.orders;
	}

	public void setOrders(Set<Order> orders) {
		this.orders = orders;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "informationUser")
	public Set<Store> getStores() {
		return this.stores;
	}

	public void setStores(Set<Store> stores) {
		this.stores = stores;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "informationUser")
	public Set<Ship> getShips() {
		return this.ships;
	}

	public void setShips(Set<Ship> ships) {
		this.ships = ships;
	}

}
